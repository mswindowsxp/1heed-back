/*
 * This file is generated by jOOQ.
 */
package io.uetunited.oneheed.entity.public_.tables;


import io.uetunited.oneheed.entity.public_.Public;
import io.uetunited.oneheed.entity.public_.tables.records.ConversationsRecord;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Conversations extends TableImpl<ConversationsRecord> {

    private static final long serialVersionUID = -493066778;

    /**
     * The reference instance of <code>public.conversations</code>
     */
    public static final Conversations CONVERSATIONS = new Conversations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConversationsRecord> getRecordType() {
        return ConversationsRecord.class;
    }

    /**
     * The column <code>public.conversations.page_id</code>.
     */
    public final TableField<ConversationsRecord, String> PAGE_ID = createField("page_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.conversations.customer_id</code>.
     */
    public final TableField<ConversationsRecord, String> CUSTOMER_ID = createField("customer_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.conversations.user_id</code>.
     */
    public final TableField<ConversationsRecord, String> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.conversations.status</code>.
     */
    public final TableField<ConversationsRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.conversations.start_at</code>.
     */
    public final TableField<ConversationsRecord, Timestamp> START_AT = createField("start_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.conversations.end_at</code>.
     */
    public final TableField<ConversationsRecord, Timestamp> END_AT = createField("end_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.conversations.channel</code>.
     */
    public final TableField<ConversationsRecord, String> CHANNEL = createField("channel", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.conversations.id</code>.
     */
    public final TableField<ConversationsRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * Create a <code>public.conversations</code> table reference
     */
    public Conversations() {
        this(DSL.name("conversations"), null);
    }

    /**
     * Create an aliased <code>public.conversations</code> table reference
     */
    public Conversations(String alias) {
        this(DSL.name(alias), CONVERSATIONS);
    }

    /**
     * Create an aliased <code>public.conversations</code> table reference
     */
    public Conversations(Name alias) {
        this(alias, CONVERSATIONS);
    }

    private Conversations(Name alias, Table<ConversationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Conversations(Name alias, Table<ConversationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Conversations(Table<O> child, ForeignKey<O, ConversationsRecord> key) {
        super(child, key, CONVERSATIONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Conversations as(String alias) {
        return new Conversations(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Conversations as(Name alias) {
        return new Conversations(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Conversations rename(String name) {
        return new Conversations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Conversations rename(Name name) {
        return new Conversations(name, null);
    }
}
