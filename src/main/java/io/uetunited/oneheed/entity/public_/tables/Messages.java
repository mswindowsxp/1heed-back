/*
 * This file is generated by jOOQ.
 */
package io.uetunited.oneheed.entity.public_.tables;


import io.uetunited.oneheed.entity.public_.Public;
import io.uetunited.oneheed.entity.public_.tables.records.MessagesRecord;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Messages extends TableImpl<MessagesRecord> {

    private static final long serialVersionUID = 486750140;

    /**
     * The reference instance of <code>public.messages</code>
     */
    public static final Messages MESSAGES = new Messages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessagesRecord> getRecordType() {
        return MessagesRecord.class;
    }

    /**
     * The column <code>public.messages.id</code>.
     */
    public final TableField<MessagesRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.messages.social_id</code>.
     */
    public final TableField<MessagesRecord, String> SOCIAL_ID = createField("social_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.messages.channel</code>.
     */
    public final TableField<MessagesRecord, String> CHANNEL = createField("channel", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.messages.conversation_id</code>.
     */
    public final TableField<MessagesRecord, String> CONVERSATION_ID = createField("conversation_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.messages.from</code>.
     */
    public final TableField<MessagesRecord, String> FROM = createField("from", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.messages.to</code>.
     */
    public final TableField<MessagesRecord, String> TO = createField("to", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.messages.content</code>.
     */
    public final TableField<MessagesRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.messages.read_status</code>.
     */
    public final TableField<MessagesRecord, Integer> READ_STATUS = createField("read_status", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.messages.send_status</code>.
     */
    public final TableField<MessagesRecord, Integer> SEND_STATUS = createField("send_status", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.messages.read_at</code>.
     */
    public final TableField<MessagesRecord, Timestamp> READ_AT = createField("read_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.messages.send_at</code>.
     */
    public final TableField<MessagesRecord, Timestamp> SEND_AT = createField("send_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.messages.from_social_id</code>.
     */
    public final TableField<MessagesRecord, String> FROM_SOCIAL_ID = createField("from_social_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.messages.to_social_id</code>.
     */
    public final TableField<MessagesRecord, String> TO_SOCIAL_ID = createField("to_social_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.messages</code> table reference
     */
    public Messages() {
        this(DSL.name("messages"), null);
    }

    /**
     * Create an aliased <code>public.messages</code> table reference
     */
    public Messages(String alias) {
        this(DSL.name(alias), MESSAGES);
    }

    /**
     * Create an aliased <code>public.messages</code> table reference
     */
    public Messages(Name alias) {
        this(alias, MESSAGES);
    }

    private Messages(Name alias, Table<MessagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Messages(Name alias, Table<MessagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Messages(Table<O> child, ForeignKey<O, MessagesRecord> key) {
        super(child, key, MESSAGES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Messages as(String alias) {
        return new Messages(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Messages as(Name alias) {
        return new Messages(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Messages rename(String name) {
        return new Messages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Messages rename(Name name) {
        return new Messages(name, null);
    }
}
